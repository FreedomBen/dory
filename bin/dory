#!/usr/bin/env ruby

require 'thor'
require 'yaml'

require 'dory'

class DoryBin < Thor
  class_option :verbose, type: :boolean, aliases: 'v', default: false

  desc 'up', 'Bring up dory services (nginx-proxy, dnsmasq, resolv)'
  long_desc <<-LONGDESC
    Bring up dory services (nginx-proxy, dnsmasq, resolv)

    When run, the docker container for the nginx proxy is started,
    along with a local dnsmasq instance to resolve DNS requests
    for your custom domain to the nginx proxy.  The local resolver
    will also be configured to use the dnsmasq instance as a nameserver

    > $ dory up
  LONGDESC
  def up
    exec_up(options)
  end

  desc 'down', 'Stop all dory services'
  long_desc <<-LONGDESC
    Stops all dory services.  Can optionally pass [-d|--destroy]
    to destroy the containers when they stop.

    > $ dory down [-d|--destroy]
  LONGDESC
  option :destroy, type: :boolean, aliases: 'd', default: true
  def down
    exec_down(options)
  end

  desc 'version', 'Check current installed version of dory'
  def version
    puts "Dory - Version: #{Dory::VERSION}"
  end

  desc 'restart', 'Stop and restart all dory services'
  long_desc <<-LONGDESC
    Stop and restart dory services (nginx-proxy, dnsmasq, resolv)

    > $ dory restart [-d|--destroy]
  LONGDESC
  option :destroy, type: :boolean, aliases: 'd', default: true
  def restart
    exec_down(options)
    exec_up(options)
  end

  desc 'status', 'Report status of the dory services'
  long_desc <<-LONGDESC
    Checks the current status of the services managed by dory.
    This includes nginx-proxy, dnsmasq, and resolv

    > $ dory status
  LONGDESC
  def status
    exec_status(options)
  end

  desc 'config-file', 'Write a default config file'
  long_desc <<-LONGDESC
    Writes a dory config file to #{Dory::Config.filename}
    containing the default settings.  This can then be configured
    as preferred.
  LONGDESC
  option :upgrade, type: :boolean, aliases: 'u', default: false
  option :force, type: :boolean, aliases: 'f', default: false
  def config_file
    exec_config_file(options)
  end

  private

  def config_file_action(options)
    if options[:upgrade]
      'u'
    elsif options[:force]
      'o'
    else
      print "A config file already exists at #{Dory::Config.filename}.  [U]pgrade, [O]verwrite with default settings, or do [N]othing? (U/O/N): ".yellow
      STDIN.gets.chomp
    end
  end

  def take_action(action)
    if action =~ /u/i
      puts "Upgrading config file at #{Dory::Config.filename}".green
      Dory::Config.upgrade_settings_file
    elsif action =~ /o/i
      puts "Overwriting config file with new version at #{Dory::Config.filename}".green
      Dory::Config.write_default_settings_file
    else
      puts "User declined.  Not writing config file".red
      return
    end
  end

  def exec_config_file(options)
    if File.exist?(Dory::Config.filename)
      take_action(config_file_action(options))
    else
      puts "Writing new config file to #{Dory::Config.filename}".green
      Dory::Config.write_default_settings_file
    end
  end

  def exec_up(options)
    puts "Reading settings file at '#{Dory::Config.filename}'".green if options[:verbose]
    settings = Dory::Config.settings
    if settings[:dory][:nginx_proxy][:enabled]
      puts "nginx_proxy enabled in config file".green if options[:verbose]
      if Dory::Proxy.start
        puts "Successfully started nginx proxy".green
      else
        puts "Error starting nginx proxy".red
      end
    else
      puts "nginx_proxy disabled in config file".yellow
    end

    if settings[:dory][:dnsmasq][:enabled]
      puts "dnsmasq enabled in config file".green if options[:verbose]
      if Dory::Dnsmasq.start
        puts "Successfully started dnsmasq".green
      else
        puts "Error starting dnsmasq".red
      end
    else
      puts "dnsmasq disabled in config file".yellow
    end

    if settings[:dory][:resolv][:enabled]
      if Dory::Resolv.configure
        puts "Successfully configured local resolver".green
      else
        puts "Error configuring local resolver".red
      end
      puts "resolv enabled in config file".green if options[:verbose]
    else
      puts "resolv disabled in config file".yellow
    end
  end

  def exec_status(_options)
    settings = Dory::Config.settings

    if Dory::Proxy.running?
      puts "[*] Nginx proxy:  Running as docker container #{Dory::Proxy.container_name}".green
    elsif !settings[:dory][:nginx_proxy][:enabled]
      puts "[*] Nginx proxy is disabled in config file".yellow
    else
      puts "[*] Nginx proxy is not running".red
    end

    if Dory::Dnsmasq.running?
      puts "[*] Dnsmasq:  Running as docker container #{Dory::Dnsmasq.container_name}".green
    elsif !settings[:dory][:dnsmasq][:enabled]
      puts "[*] Dnsmasq is disabled in config file".yellow
    else
      puts "[*] Dnsmasq is not running".red
    end

    if Dory::Resolv.has_our_nameserver?
      puts "[*] Resolv:  configured with #{Dory::Resolv.file_nameserver_line}".green
    elsif !settings[:dory][:resolv][:enabled]
      puts "[*] Resolv is disabled in config file".yellow
    else
      puts "[*] Resolv is not configured".red
    end
  end

  def exec_down(options)
    if Dory::Resolv.clean
      puts "nameserver removed from resolv file".green
    else
      puts "Unable to remove nameserver from resolv file".red
    end

    if Dory::Dnsmasq.stop
      puts "Dnsmasq container stopped".green
      if options[:destroy]
        if Dory::Dnsmasq.delete
          puts "Dnsmasq container successfully deleted".green
        else
          puts "Dnsmasq container failed to delete".red
        end
      end
    else
      puts "Dnsmasq container failed to stop".red
    end

    if Dory::Proxy.stop
      puts "Nginx proxy stopped".green
      if options[:destroy]
        if Dory::Proxy.delete
          puts "Nginx proxy container successfully deleted".green
        else
          puts "Nginx proxy container failed to delete".red
        end
      end
    else
      puts "Nginx proxy failed to stop".red
    end
  end
end

aliases = {
  'start' => 'up',
  'stop'  => 'down',
}

if !ARGV.empty? && %w[-v --version].include?(ARGV.first)
  puts "Dory - Version: #{Dory::VERSION}"
else
  DoryBin.start(ARGV.map { |a| aliases.keys.include?(a) ? aliases[a] : a })
end
